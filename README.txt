In this program, I have created a discrete event simulator that processes events in a similar way to that of an OS, allocating resources to specific programs and releasing the resource for another use once a process finishes up with it. In order to generate events, the program runs based off of fifteen pre-established values, defined within the header of the program, that specify the specific ways that the simulator will execute, including the length of time, the properties of the components, and the probabilities for certain events to occur. The core of the implementation of this program is five main structures, being four FIFO queues and one priority queue. These have been implemented in C by deriving from a linked list code, with each function of such manipulated to serve the goal of this program in different ways, including sorting, defining time, and overall cohesion. The priority queue is the main structure of this program, as when an event is taken off of it, there is an event-handler that is designated to take care of the job that is released. I have assigned each of the potential jobs a keycode, ranging from 0-5, including the events: handleJobArrival, handleCPUExit, handleDisk1Exit, handleDisk2Exit, handleNetworkExit, and handleEndSimulation. These functions all serve different but equally meaningful purposes. Those dedicated to FIFO queues need to keep track of their own job lists, and add them to the priority queue for their next task once completed. Because of this, there are many parameters for each of these, with the need to reference different FIFO queues, the priority queue, and a specific event each time the function is run. For all of this to connect, I had to create an event type with several characteristics to accomplish the goals of keeping track of time, of the next event in both a FIFO queue and priority queue, the event type, and the number job it was. There are also several utility functions within this program to make certain tasks much easier. These functions include createLogFile, which opens an new file with a name designated by a character array argument, generateProbability, which given a double of probability (either exit or network) will return an int of 0 or 1 to represent sending the job to the network or to the disks, generateTime, which given two bounds will produce a random number between them, addLogFile, which takes in an event and writes to the log file depending on which event key it is.  Each time this program is run, it prints a log file that details which of these jobs were processed, detailing the specific event that occurred and the time at which it took place, all in time order. I have included a screenshot for reference.   
In order to get this program to execute properly, it is full of if-statements, else-statements, and integer values of 0 and 1 to serve as a boolean.


    
